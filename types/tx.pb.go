// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: moduleplugin/v1beta/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types2 "github.com/cosmos/cosmos-sdk/codec/types"
	types3 "github.com/cosmos/cosmos-sdk/types"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	types1 "github.com/tendermint/tendermint/abci/types"
	types "github.com/tendermint/tendermint/proto/tendermint/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Context struct {
	Header          *types.Header          `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	ChainId         string                 `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TxBytes         []byte                 `protobuf:"bytes,3,opt,name=tx_bytes,json=txBytes,proto3" json:"tx_bytes,omitempty"`
	VoteInfos       []*types1.VoteInfo     `protobuf:"bytes,4,rep,name=vote_infos,json=voteInfos,proto3" json:"vote_infos,omitempty"`
	CheckTx         bool                   `protobuf:"varint,5,opt,name=check_tx,json=checkTx,proto3" json:"check_tx,omitempty"`
	RecheckTx       bool                   `protobuf:"varint,6,opt,name=recheck_tx,json=recheckTx,proto3" json:"recheck_tx,omitempty"`
	ConsensusParams *types.ConsensusParams `protobuf:"bytes,7,opt,name=consensus_params,json=consensusParams,proto3" json:"consensus_params,omitempty"`
}

func (m *Context) Reset()         { *m = Context{} }
func (m *Context) String() string { return proto.CompactTextString(m) }
func (*Context) ProtoMessage()    {}
func (*Context) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ade5936b9259d17, []int{0}
}
func (m *Context) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Context) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Context.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Context) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Context.Merge(m, src)
}
func (m *Context) XXX_Size() int {
	return m.Size()
}
func (m *Context) XXX_DiscardUnknown() {
	xxx_messageInfo_Context.DiscardUnknown(m)
}

var xxx_messageInfo_Context proto.InternalMessageInfo

func (m *Context) GetHeader() *types.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Context) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *Context) GetTxBytes() []byte {
	if m != nil {
		return m.TxBytes
	}
	return nil
}

func (m *Context) GetVoteInfos() []*types1.VoteInfo {
	if m != nil {
		return m.VoteInfos
	}
	return nil
}

func (m *Context) GetCheckTx() bool {
	if m != nil {
		return m.CheckTx
	}
	return false
}

func (m *Context) GetRecheckTx() bool {
	if m != nil {
		return m.RecheckTx
	}
	return false
}

func (m *Context) GetConsensusParams() *types.ConsensusParams {
	if m != nil {
		return m.ConsensusParams
	}
	return nil
}

type RequestHandle struct {
	Msg     *types2.Any `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Context *Context    `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
}

func (m *RequestHandle) Reset()         { *m = RequestHandle{} }
func (m *RequestHandle) String() string { return proto.CompactTextString(m) }
func (*RequestHandle) ProtoMessage()    {}
func (*RequestHandle) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ade5936b9259d17, []int{1}
}
func (m *RequestHandle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestHandle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestHandle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestHandle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestHandle.Merge(m, src)
}
func (m *RequestHandle) XXX_Size() int {
	return m.Size()
}
func (m *RequestHandle) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestHandle.DiscardUnknown(m)
}

var xxx_messageInfo_RequestHandle proto.InternalMessageInfo

func (m *RequestHandle) GetMsg() *types2.Any {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *RequestHandle) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type ResponseHandle struct {
	Result *types3.Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *ResponseHandle) Reset()         { *m = ResponseHandle{} }
func (m *ResponseHandle) String() string { return proto.CompactTextString(m) }
func (*ResponseHandle) ProtoMessage()    {}
func (*ResponseHandle) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ade5936b9259d17, []int{2}
}
func (m *ResponseHandle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseHandle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseHandle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseHandle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseHandle.Merge(m, src)
}
func (m *ResponseHandle) XXX_Size() int {
	return m.Size()
}
func (m *ResponseHandle) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseHandle.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseHandle proto.InternalMessageInfo

func (m *ResponseHandle) GetResult() *types3.Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type RequestGet struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *RequestGet) Reset()         { *m = RequestGet{} }
func (m *RequestGet) String() string { return proto.CompactTextString(m) }
func (*RequestGet) ProtoMessage()    {}
func (*RequestGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ade5936b9259d17, []int{3}
}
func (m *RequestGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGet.Merge(m, src)
}
func (m *RequestGet) XXX_Size() int {
	return m.Size()
}
func (m *RequestGet) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGet.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGet proto.InternalMessageInfo

func (m *RequestGet) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type ResponseGet struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *ResponseGet) Reset()         { *m = ResponseGet{} }
func (m *ResponseGet) String() string { return proto.CompactTextString(m) }
func (*ResponseGet) ProtoMessage()    {}
func (*ResponseGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ade5936b9259d17, []int{4}
}
func (m *ResponseGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseGet.Merge(m, src)
}
func (m *ResponseGet) XXX_Size() int {
	return m.Size()
}
func (m *ResponseGet) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseGet.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseGet proto.InternalMessageInfo

func (m *ResponseGet) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type RequestSet struct {
	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *RequestSet) Reset()         { *m = RequestSet{} }
func (m *RequestSet) String() string { return proto.CompactTextString(m) }
func (*RequestSet) ProtoMessage()    {}
func (*RequestSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ade5936b9259d17, []int{5}
}
func (m *RequestSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSet.Merge(m, src)
}
func (m *RequestSet) XXX_Size() int {
	return m.Size()
}
func (m *RequestSet) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSet.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSet proto.InternalMessageInfo

func (m *RequestSet) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *RequestSet) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type ResponseSet struct {
}

func (m *ResponseSet) Reset()         { *m = ResponseSet{} }
func (m *ResponseSet) String() string { return proto.CompactTextString(m) }
func (*ResponseSet) ProtoMessage()    {}
func (*ResponseSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ade5936b9259d17, []int{6}
}
func (m *ResponseSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseSet.Merge(m, src)
}
func (m *ResponseSet) XXX_Size() int {
	return m.Size()
}
func (m *ResponseSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseSet.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseSet proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Context)(nil), "moduleplugin.v1beta1.Context")
	proto.RegisterType((*RequestHandle)(nil), "moduleplugin.v1beta1.RequestHandle")
	proto.RegisterType((*ResponseHandle)(nil), "moduleplugin.v1beta1.ResponseHandle")
	proto.RegisterType((*RequestGet)(nil), "moduleplugin.v1beta1.RequestGet")
	proto.RegisterType((*ResponseGet)(nil), "moduleplugin.v1beta1.ResponseGet")
	proto.RegisterType((*RequestSet)(nil), "moduleplugin.v1beta1.RequestSet")
	proto.RegisterType((*ResponseSet)(nil), "moduleplugin.v1beta1.ResponseSet")
}

func init() { proto.RegisterFile("moduleplugin/v1beta/tx.proto", fileDescriptor_4ade5936b9259d17) }

var fileDescriptor_4ade5936b9259d17 = []byte{
	// 596 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcd, 0x4e, 0xdb, 0x4c,
	0x14, 0xc5, 0xe4, 0x23, 0x81, 0x1b, 0xf8, 0x8a, 0x2c, 0x16, 0x26, 0x05, 0xcb, 0x84, 0x0a, 0x65,
	0x53, 0xbb, 0xa4, 0x95, 0xca, 0xb2, 0x85, 0x05, 0x3f, 0x6a, 0xa5, 0xca, 0x46, 0x5d, 0x54, 0xaa,
	0xa2, 0xb1, 0x73, 0x09, 0x16, 0xf1, 0x4c, 0x9a, 0xb9, 0x8e, 0x9c, 0xb7, 0xe8, 0x1b, 0xf4, 0x21,
	0xfa, 0x12, 0x5d, 0xb2, 0xec, 0xb2, 0x82, 0x17, 0xa9, 0x3c, 0x33, 0x01, 0x23, 0x28, 0x6c, 0x22,
	0xdf, 0x39, 0xe7, 0x9e, 0x33, 0xf7, 0xcc, 0x55, 0x60, 0x23, 0x13, 0xfd, 0x7c, 0x88, 0xa3, 0x61,
	0x3e, 0x48, 0x79, 0x30, 0xd9, 0x8d, 0x91, 0x58, 0x40, 0x85, 0x3f, 0x1a, 0x0b, 0x12, 0xf6, 0x5a,
	0x15, 0xf5, 0x35, 0xba, 0xdb, 0x5a, 0x1f, 0x08, 0x31, 0x18, 0x62, 0xa0, 0x38, 0x71, 0x7e, 0x16,
	0x30, 0x3e, 0xd5, 0x0d, 0xad, 0xed, 0x44, 0xc8, 0x4c, 0xc8, 0x20, 0x66, 0x12, 0x03, 0x16, 0x27,
	0xa9, 0x91, 0xdc, 0x55, 0x85, 0x21, 0x6d, 0x10, 0xf2, 0x3e, 0x8e, 0xb3, 0x94, 0x53, 0x40, 0xd3,
	0x11, 0x4a, 0xfd, 0x6b, 0xd0, 0xcd, 0x7b, 0xe8, 0x88, 0x8d, 0x59, 0x36, 0x83, 0x9f, 0x57, 0x60,
	0x65, 0x50, 0xe9, 0x6d, 0xff, 0x9c, 0x87, 0xc6, 0x81, 0xe0, 0x84, 0x05, 0xd9, 0xaf, 0xa0, 0x7e,
	0x8e, 0xac, 0x8f, 0x63, 0xc7, 0xf2, 0xac, 0x4e, 0xb3, 0xeb, 0xf8, 0xb7, 0x9d, 0xbe, 0x6e, 0x3a,
	0x52, 0x78, 0x68, 0x78, 0xf6, 0x3a, 0x2c, 0x26, 0xe7, 0x2c, 0xe5, 0xbd, 0xb4, 0xef, 0xcc, 0x7b,
	0x56, 0x67, 0x29, 0x6c, 0xa8, 0xfa, 0xb8, 0x5f, 0x42, 0x54, 0xf4, 0xe2, 0x29, 0xa1, 0x74, 0x6a,
	0x9e, 0xd5, 0x59, 0x0e, 0x1b, 0x54, 0xec, 0x97, 0xa5, 0xbd, 0x07, 0x30, 0x11, 0x84, 0xbd, 0x94,
	0x9f, 0x09, 0xe9, 0xfc, 0xe7, 0xd5, 0x3a, 0xcd, 0xee, 0x7a, 0xd5, 0x4b, 0x4d, 0xfe, 0x59, 0x10,
	0x1e, 0xf3, 0x33, 0x11, 0x2e, 0x4d, 0xcc, 0x97, 0xd4, 0x7e, 0x98, 0x5c, 0xf4, 0xa8, 0x70, 0x16,
	0x3c, 0xab, 0xb3, 0x58, 0xfa, 0x61, 0x72, 0x71, 0x5a, 0xd8, 0x9b, 0x00, 0x63, 0xbc, 0x01, 0xeb,
	0x0a, 0x5c, 0x32, 0x27, 0xa7, 0x85, 0xfd, 0x01, 0x56, 0x13, 0xc1, 0x25, 0x72, 0x99, 0xcb, 0x9e,
	0x8e, 0xc7, 0x69, 0xa8, 0x29, 0xb7, 0xee, 0x4f, 0x79, 0x30, 0x63, 0x7e, 0x52, 0xc4, 0xf0, 0x59,
	0x72, 0xf7, 0xa0, 0x3d, 0x82, 0x95, 0x10, 0xbf, 0xe5, 0x28, 0xe9, 0x88, 0xf1, 0xfe, 0x10, 0xed,
	0x1d, 0xa8, 0x65, 0x72, 0x60, 0x72, 0x5b, 0xf3, 0xf5, 0x73, 0xfb, 0xb3, 0xe7, 0xf6, 0xdf, 0xf3,
	0x69, 0x58, 0x12, 0xec, 0xb7, 0xd0, 0x48, 0x74, 0xda, 0x2a, 0xaf, 0x66, 0x77, 0xd3, 0x7f, 0x68,
	0x61, 0x7c, 0xf3, 0x24, 0xe1, 0x8c, 0xdd, 0x3e, 0x81, 0xff, 0x43, 0x94, 0xa3, 0xf2, 0x1e, 0xc6,
	0x72, 0x0f, 0xea, 0x63, 0x94, 0xf9, 0x90, 0x8c, 0xab, 0xe7, 0xeb, 0x4d, 0xf2, 0xcb, 0x4d, 0xd2,
	0x11, 0xce, 0xd4, 0x42, 0xc5, 0x0b, 0x0d, 0xbf, 0xed, 0x02, 0x98, 0xdb, 0x1f, 0x22, 0xd9, 0xab,
	0x50, 0xbb, 0xc0, 0xa9, 0x12, 0x59, 0x0e, 0xcb, 0xcf, 0xf6, 0x36, 0x34, 0x67, 0x5e, 0x25, 0x61,
	0x0d, 0x16, 0x26, 0x6c, 0x98, 0xa3, 0xa1, 0xe8, 0xa2, 0xfd, 0xe6, 0x46, 0x24, 0x7a, 0x48, 0xe4,
	0xb6, 0x6b, 0xbe, 0xda, 0xb5, 0x72, 0x2b, 0x1d, 0x21, 0x75, 0xbf, 0x42, 0xfd, 0xa3, 0x1a, 0xdf,
	0x8e, 0xa0, 0x6e, 0xe6, 0xda, 0x7e, 0x38, 0x91, 0x3b, 0x79, 0xb7, 0x5e, 0xfc, 0x8b, 0x54, 0x8d,
	0xa8, 0xfb, 0xc3, 0x82, 0x85, 0x88, 0x18, 0xa1, 0x7d, 0x02, 0xb5, 0x72, 0x14, 0xef, 0x51, 0xed,
	0x43, 0xa4, 0xd6, 0xd6, 0xe3, 0xc2, 0xa5, 0xc8, 0x09, 0xd4, 0xa2, 0x27, 0xb5, 0xa2, 0xa7, 0xb5,
	0x22, 0xa4, 0xfd, 0x77, 0xbf, 0xae, 0x5c, 0xeb, 0xf2, 0xca, 0xb5, 0xfe, 0x5c, 0xb9, 0xd6, 0xf7,
	0x6b, 0x77, 0xee, 0xf2, 0xda, 0x9d, 0xfb, 0x7d, 0xed, 0xce, 0x7d, 0xd9, 0x19, 0xa4, 0x74, 0x9e,
	0xc7, 0x7e, 0x22, 0xb2, 0x20, 0x4b, 0x04, 0x4f, 0x18, 0x05, 0x5a, 0xee, 0xa5, 0xf9, 0xeb, 0x51,
	0xbb, 0x1a, 0xd7, 0xd5, 0x92, 0xbd, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x7a, 0xc1, 0x80, 0x2c,
	0x97, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ModuleClient is the client API for Module service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ModuleClient interface {
	Handle(ctx context.Context, in *RequestHandle, opts ...grpc.CallOption) (*ResponseHandle, error)
}

type moduleClient struct {
	cc grpc1.ClientConn
}

func NewModuleClient(cc grpc1.ClientConn) ModuleClient {
	return &moduleClient{cc}
}

func (c *moduleClient) Handle(ctx context.Context, in *RequestHandle, opts ...grpc.CallOption) (*ResponseHandle, error) {
	out := new(ResponseHandle)
	err := c.cc.Invoke(ctx, "/moduleplugin.v1beta1.Module/Handle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModuleServer is the server API for Module service.
type ModuleServer interface {
	Handle(context.Context, *RequestHandle) (*ResponseHandle, error)
}

// UnimplementedModuleServer can be embedded to have forward compatible implementations.
type UnimplementedModuleServer struct {
}

func (*UnimplementedModuleServer) Handle(ctx context.Context, req *RequestHandle) (*ResponseHandle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handle not implemented")
}

func RegisterModuleServer(s grpc1.Server, srv ModuleServer) {
	s.RegisterService(&_Module_serviceDesc, srv)
}

func _Module_Handle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).Handle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moduleplugin.v1beta1.Module/Handle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).Handle(ctx, req.(*RequestHandle))
	}
	return interceptor(ctx, in, info, handler)
}

var _Module_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moduleplugin.v1beta1.Module",
	HandlerType: (*ModuleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handle",
			Handler:    _Module_Handle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moduleplugin/v1beta/tx.proto",
}

// StateClient is the client API for State service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StateClient interface {
	Get(ctx context.Context, in *RequestGet, opts ...grpc.CallOption) (*ResponseGet, error)
	Set(ctx context.Context, in *RequestSet, opts ...grpc.CallOption) (*ResponseSet, error)
}

type stateClient struct {
	cc grpc1.ClientConn
}

func NewStateClient(cc grpc1.ClientConn) StateClient {
	return &stateClient{cc}
}

func (c *stateClient) Get(ctx context.Context, in *RequestGet, opts ...grpc.CallOption) (*ResponseGet, error) {
	out := new(ResponseGet)
	err := c.cc.Invoke(ctx, "/moduleplugin.v1beta1.State/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) Set(ctx context.Context, in *RequestSet, opts ...grpc.CallOption) (*ResponseSet, error) {
	out := new(ResponseSet)
	err := c.cc.Invoke(ctx, "/moduleplugin.v1beta1.State/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateServer is the server API for State service.
type StateServer interface {
	Get(context.Context, *RequestGet) (*ResponseGet, error)
	Set(context.Context, *RequestSet) (*ResponseSet, error)
}

// UnimplementedStateServer can be embedded to have forward compatible implementations.
type UnimplementedStateServer struct {
}

func (*UnimplementedStateServer) Get(ctx context.Context, req *RequestGet) (*ResponseGet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedStateServer) Set(ctx context.Context, req *RequestSet) (*ResponseSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}

func RegisterStateServer(s grpc1.Server, srv StateServer) {
	s.RegisterService(&_State_serviceDesc, srv)
}

func _State_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moduleplugin.v1beta1.State/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).Get(ctx, req.(*RequestGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moduleplugin.v1beta1.State/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).Set(ctx, req.(*RequestSet))
	}
	return interceptor(ctx, in, info, handler)
}

var _State_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moduleplugin.v1beta1.State",
	HandlerType: (*StateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _State_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _State_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moduleplugin/v1beta/tx.proto",
}

func (m *Context) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Context) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Context) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConsensusParams != nil {
		{
			size, err := m.ConsensusParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.RecheckTx {
		i--
		if m.RecheckTx {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.CheckTx {
		i--
		if m.CheckTx {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.VoteInfos) > 0 {
		for iNdEx := len(m.VoteInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VoteInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TxBytes) > 0 {
		i -= len(m.TxBytes)
		copy(dAtA[i:], m.TxBytes)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxBytes)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestHandle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestHandle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Context != nil {
		{
			size, err := m.Context.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseHandle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseHandle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Context) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TxBytes)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.VoteInfos) > 0 {
		for _, e := range m.VoteInfos {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.CheckTx {
		n += 2
	}
	if m.RecheckTx {
		n += 2
	}
	if m.ConsensusParams != nil {
		l = m.ConsensusParams.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *RequestHandle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Context != nil {
		l = m.Context.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *ResponseHandle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *RequestGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *ResponseGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *RequestSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *ResponseSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Context) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Context: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Context: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &types.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxBytes = append(m.TxBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.TxBytes == nil {
				m.TxBytes = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteInfos = append(m.VoteInfos, &types1.VoteInfo{})
			if err := m.VoteInfos[len(m.VoteInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckTx", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CheckTx = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecheckTx", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecheckTx = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusParams == nil {
				m.ConsensusParams = &types.ConsensusParams{}
			}
			if err := m.ConsensusParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &types2.Any{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Context == nil {
				m.Context = &Context{}
			}
			if err := m.Context.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &types3.Result{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
